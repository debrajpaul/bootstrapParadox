{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport ContainerRender from './ContainerRender';\nimport Portal from './Portal';\nvar openCount = 0;\nvar windowIsUndefined = !(typeof window !== 'undefined' && window.document && window.document.createElement);\nvar IS_REACT_16 = 'createPortal' in ReactDOM;\n\nvar PortalWrapper = function (_React$Component) {\n  _inherits(PortalWrapper, _React$Component);\n\n  function PortalWrapper(props) {\n    _classCallCheck(this, PortalWrapper);\n\n    var _this = _possibleConstructorReturn(this, (PortalWrapper.__proto__ || Object.getPrototypeOf(PortalWrapper)).call(this, props));\n\n    _this.getParent = function () {\n      var getContainer = _this.props.getContainer;\n\n      if (getContainer) {\n        if (typeof getContainer === 'string') {\n          return document.querySelectorAll(getContainer)[0];\n        }\n\n        if (typeof getContainer === 'function') {\n          return getContainer();\n        }\n\n        if ((typeof getContainer === 'undefined' ? 'undefined' : _typeof(getContainer)) === 'object' && getContainer instanceof window.HTMLElement) {\n          return getContainer;\n        }\n      }\n\n      return document.body;\n    };\n\n    _this.getContainer = function () {\n      if (windowIsUndefined) {\n        return null;\n      }\n\n      if (!_this.container) {\n        _this.container = document.createElement('div');\n\n        var parent = _this.getParent();\n\n        parent.appendChild(_this.container);\n      }\n\n      _this.setWrapperClassName();\n\n      return _this.container;\n    };\n\n    _this.setWrapperClassName = function () {\n      var wrapperClassName = _this.props.wrapperClassName;\n\n      if (_this.container && wrapperClassName && wrapperClassName !== _this.container.className) {\n        _this.container.className = wrapperClassName;\n      }\n    };\n\n    _this.savePortal = function (c) {\n      _this._component = c;\n    };\n\n    var visible = props.visible;\n    openCount = visible ? openCount + 1 : openCount;\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(PortalWrapper, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.setWrapperClassName();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var visible = this.props.visible;\n      this.container = null;\n      this._component = null; // 离开时不会 render， 导到离开时数值不变，改用 func 。。\n\n      openCount = visible && openCount ? openCount - 1 : openCount;\n\n      if (!IS_REACT_16) {\n        if (visible) {\n          this.renderComponent({\n            afterClose: this.removeContainer,\n            onClose: function onClose() {},\n            visible: false\n          });\n        } else {\n          this.removeContainer();\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          children = _props.children,\n          forceRender = _props.forceRender,\n          visible = _props.visible;\n      var portal = null;\n      var childProps = {\n        getOpenCount: function getOpenCount() {\n          return openCount;\n        },\n        getContainer: this.getContainer\n      }; // suppport react15\n\n      if (!IS_REACT_16) {\n        return React.createElement(ContainerRender, {\n          parent: this,\n          visible: visible,\n          autoDestroy: false,\n          getComponent: function getComponent() {\n            var extra = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return children(_extends({}, extra, childProps, {\n              ref: _this2.savePortal\n            }));\n          },\n          getContainer: this.getContainer,\n          forceRender: forceRender\n        }, function (_ref) {\n          var renderComponent = _ref.renderComponent,\n              removeContainer = _ref.removeContainer;\n          _this2.renderComponent = renderComponent;\n          _this2.removeContainer = removeContainer;\n          return null;\n        });\n      }\n\n      if (forceRender || visible || this._component) {\n        portal = React.createElement(Portal, {\n          getContainer: this.getContainer,\n          ref: this.savePortal\n        }, children(childProps));\n      }\n\n      return portal;\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, _ref2) {\n      var prevVisible = _ref2.visible;\n      var visible = props.visible;\n\n      if (prevVisible !== undefined && visible !== prevVisible) {\n        openCount = visible && !prevVisible ? openCount + 1 : openCount - 1;\n      }\n\n      return {\n        visible: visible\n      };\n    }\n  }]);\n\n  return PortalWrapper;\n}(React.Component);\n\nPortalWrapper.propTypes = {\n  wrapperClassName: PropTypes.string,\n  forceRender: PropTypes.bool,\n  getContainer: PropTypes.any,\n  children: PropTypes.func,\n  visible: PropTypes.bool\n};\nexport default polyfill(PortalWrapper);","map":null,"metadata":{},"sourceType":"module"}