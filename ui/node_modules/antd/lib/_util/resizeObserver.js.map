{"version":3,"sources":["_util/resizeObserver.jsx"],"names":["ReactResizeObserver","arguments","resizeObserver","onResize","props","onComponentUpdated","destroyObserver","disabled","element","ResizeObserver","observe","disconnect","children","React","Component"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;IACMA,mB;;;;;AACF,iCAAc;AAAA;;AAAA;;AACV,8FAASC,SAAT;AACA,UAAKC,cAAL,GAAsB,IAAtB;;AACA,UAAKC,QAAL,GAAgB,YAAM;AAAA,UACVA,QADU,GACG,MAAKC,KADR,CACVD,QADU;;AAElB,UAAIA,QAAJ,EAAc;AACVA,QAAAA,QAAQ;AACX;AACJ,KALD;;AAHU;AASb;;;;wCACmB;AAChB,WAAKE,kBAAL;AACH;;;yCACoB;AACjB,WAAKA,kBAAL;AACH;;;2CACsB;AACnB,WAAKC,eAAL;AACH;;;yCACoB;AAAA,UACTC,QADS,GACI,KAAKH,KADT,CACTG,QADS;AAEjB,UAAMC,OAAO,GAAG,2BAAY,IAAZ,CAAhB;;AACA,UAAI,CAAC,KAAKN,cAAN,IAAwB,CAACK,QAAzB,IAAqCC,OAAzC,EAAkD;AAC9C;AACA,aAAKN,cAAL,GAAsB,IAAIO,kCAAJ,CAAmB,KAAKN,QAAxB,CAAtB;AACA,aAAKD,cAAL,CAAoBQ,OAApB,CAA4BF,OAA5B;AACH,OAJD,MAKK,IAAID,QAAJ,EAAc;AACf;AACA,aAAKD,eAAL;AACH;AACJ;;;sCACiB;AACd,UAAI,KAAKJ,cAAT,EAAyB;AACrB,aAAKA,cAAL,CAAoBS,UAApB;AACA,aAAKT,cAAL,GAAsB,IAAtB;AACH;AACJ;;;6BACQ;AAAA,iCACuB,KAAKE,KAD5B,CACGQ,QADH;AAAA,UACGA,QADH,qCACc,IADd;AAEL,aAAOA,QAAP;AACH;;;;EA1C6BC,KAAK,CAACC,S;;eA4CzBd,mB","sourcesContent":["import * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport ResizeObserver from 'resize-observer-polyfill';\nclass ReactResizeObserver extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.resizeObserver = null;\n        this.onResize = () => {\n            const { onResize } = this.props;\n            if (onResize) {\n                onResize();\n            }\n        };\n    }\n    componentDidMount() {\n        this.onComponentUpdated();\n    }\n    componentDidUpdate() {\n        this.onComponentUpdated();\n    }\n    componentWillUnmount() {\n        this.destroyObserver();\n    }\n    onComponentUpdated() {\n        const { disabled } = this.props;\n        const element = findDOMNode(this);\n        if (!this.resizeObserver && !disabled && element) {\n            // Add resize observer\n            this.resizeObserver = new ResizeObserver(this.onResize);\n            this.resizeObserver.observe(element);\n        }\n        else if (disabled) {\n            // Remove resize observer\n            this.destroyObserver();\n        }\n    }\n    destroyObserver() {\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;\n        }\n    }\n    render() {\n        const { children = null } = this.props;\n        return children;\n    }\n}\nexport default ReactResizeObserver;\n"],"file":"resizeObserver.js"}