{"version":3,"sources":["auto-complete/index.jsx"],"names":["isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","arguments","getInputElement","children","props","element","React","isValidElement","Option","Children","only","elementProps","saveSelect","node","select","renderAutoComplete","getPrefixCls","customizePrefixCls","prefixCls","size","className","notFoundContent","optionLabelProp","dataSource","cls","options","childArray","toArray","length","map","item","value","text","Error","Select","SECRET_COMBOBOX_MODE_DO_NOT_USE","focus","blur","Component","OptGroup","defaultProps","transitionName","choiceTransitionName","showSearch","filterOption"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Option, OptGroup } from 'rc-select';\nimport classNames from 'classnames';\nimport InputElement from './InputElement';\nimport Input from '../input';\nimport Select from '../select';\nimport { ConfigConsumer } from '../config-provider';\nfunction isSelectOptionOrSelectOptGroup(child) {\n    return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nexport default class AutoComplete extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getInputElement = () => {\n            const { children } = this.props;\n            const element = children && React.isValidElement(children) && children.type !== Option ? (React.Children.only(this.props.children)) : (<Input />);\n            const elementProps = Object.assign({}, element.props);\n            // https://github.com/ant-design/ant-design/pull/7742\n            delete elementProps.children;\n            return <InputElement {...elementProps}>{element}</InputElement>;\n        };\n        this.saveSelect = (node) => {\n            this.select = node;\n        };\n        this.renderAutoComplete = ({ getPrefixCls }) => {\n            const { prefixCls: customizePrefixCls, size, className = '', notFoundContent, optionLabelProp, dataSource, children, } = this.props;\n            const prefixCls = getPrefixCls('select', customizePrefixCls);\n            const cls = classNames({\n                [`${prefixCls}-lg`]: size === 'large',\n                [`${prefixCls}-sm`]: size === 'small',\n                [className]: !!className,\n                [`${prefixCls}-show-search`]: true,\n                [`${prefixCls}-auto-complete`]: true,\n            });\n            let options;\n            const childArray = React.Children.toArray(children);\n            if (childArray.length && isSelectOptionOrSelectOptGroup(childArray[0])) {\n                options = children;\n            }\n            else {\n                options = dataSource\n                    ? dataSource.map(item => {\n                        if (React.isValidElement(item)) {\n                            return item;\n                        }\n                        switch (typeof item) {\n                            case 'string':\n                                return <Option key={item}>{item}</Option>;\n                            case 'object':\n                                return (<Option key={item.value}>\n                    {item.text}\n                  </Option>);\n                            default:\n                                throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n                        }\n                    })\n                    : [];\n            }\n            return (<Select {...this.props} className={cls} mode={Select.SECRET_COMBOBOX_MODE_DO_NOT_USE} optionLabelProp={optionLabelProp} getInputElement={this.getInputElement} notFoundContent={notFoundContent} ref={this.saveSelect}>\n        {options}\n      </Select>);\n        };\n    }\n    focus() {\n        this.select.focus();\n    }\n    blur() {\n        this.select.blur();\n    }\n    render() {\n        return <ConfigConsumer>{this.renderAutoComplete}</ConfigConsumer>;\n    }\n}\nAutoComplete.Option = Option;\nAutoComplete.OptGroup = OptGroup;\nAutoComplete.defaultProps = {\n    transitionName: 'slide-up',\n    optionLabelProp: 'children',\n    choiceTransitionName: 'zoom',\n    showSearch: false,\n    filterOption: false,\n};\n"],"file":"index.js"}