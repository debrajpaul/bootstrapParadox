{"version":3,"sources":["calendar/Header.jsx"],"names":["Option","Select","Header","arguments","onYearChange","year","props","value","validRange","newValue","clone","parseInt","start","end","newYear","get","newMonth","month","onValueChange","onMonthChange","onInternalTypeChange","e","onTypeChange","target","type","getCalenderHeaderNode","node","calenderHeaderNode","getMonthYearSelections","getPrefixCls","customizePrefixCls","prefixCls","yearReactNode","getYearSelectElement","monthReactNode","getMonthSelectElement","getMonthsLocale","getTypeSwitch","locale","fullscreen","size","headerRenderCustom","headerRender","onChange","renderHeader","typeSwitch","yearSelectOffset","yearSelectTotal","suffix","options","index","push","String","current","localeData","months","i","monthsShort","rangeStart","rangeEnd","currentYear","React","Component","defaultProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Select from '../select';\nimport { Group, Button } from '../radio';\nimport { ConfigConsumer } from '../config-provider';\nconst { Option } = Select;\nexport default class Header extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.onYearChange = (year) => {\n            const { value, validRange } = this.props;\n            const newValue = value.clone();\n            newValue.year(parseInt(year, 10));\n            // switch the month so that it remains within range when year changes\n            if (validRange) {\n                const [start, end] = validRange;\n                const newYear = newValue.get('year');\n                const newMonth = newValue.get('month');\n                if (newYear === end.get('year') && newMonth > end.get('month')) {\n                    newValue.month(end.get('month'));\n                }\n                if (newYear === start.get('year') && newMonth < start.get('month')) {\n                    newValue.month(start.get('month'));\n                }\n            }\n            const onValueChange = this.props.onValueChange;\n            if (onValueChange) {\n                onValueChange(newValue);\n            }\n        };\n        this.onMonthChange = (month) => {\n            const newValue = this.props.value.clone();\n            newValue.month(parseInt(month, 10));\n            const onValueChange = this.props.onValueChange;\n            if (onValueChange) {\n                onValueChange(newValue);\n            }\n        };\n        this.onInternalTypeChange = (e) => {\n            this.onTypeChange(e.target.value);\n        };\n        this.onTypeChange = (type) => {\n            const onTypeChange = this.props.onTypeChange;\n            if (onTypeChange) {\n                onTypeChange(type);\n            }\n        };\n        this.getCalenderHeaderNode = (node) => {\n            this.calenderHeaderNode = node;\n        };\n        this.getMonthYearSelections = (getPrefixCls) => {\n            const { prefixCls: customizePrefixCls, type, value } = this.props;\n            const prefixCls = getPrefixCls('fullcalendar', customizePrefixCls);\n            const yearReactNode = this.getYearSelectElement(prefixCls, value.year());\n            const monthReactNode = type === 'month'\n                ? this.getMonthSelectElement(prefixCls, value.month(), this.getMonthsLocale(value))\n                : null;\n            return {\n                yearReactNode,\n                monthReactNode,\n            };\n        };\n        this.getTypeSwitch = () => {\n            const { locale, type, fullscreen } = this.props;\n            const size = fullscreen ? 'default' : 'small';\n            return (<Group onChange={this.onInternalTypeChange} value={type} size={size}>\n        <Button value=\"month\">{locale.month}</Button>\n        <Button value=\"year\">{locale.year}</Button>\n      </Group>);\n        };\n        this.headerRenderCustom = (headerRender) => {\n            const { type, onValueChange, value } = this.props;\n            return headerRender({\n                value,\n                type: type || 'month',\n                onChange: onValueChange,\n                onTypeChange: this.onTypeChange,\n            });\n        };\n        this.renderHeader = ({ getPrefixCls }) => {\n            const { prefixCls, headerRender } = this.props;\n            const typeSwitch = this.getTypeSwitch();\n            const { yearReactNode, monthReactNode } = this.getMonthYearSelections(getPrefixCls);\n            return headerRender ? (this.headerRenderCustom(headerRender)) : (<div className={`${prefixCls}-header`} ref={this.getCalenderHeaderNode}>\n        {yearReactNode}\n        {monthReactNode}\n        {typeSwitch}\n      </div>);\n        };\n    }\n    getYearSelectElement(prefixCls, year) {\n        const { yearSelectOffset, yearSelectTotal, locale, fullscreen, validRange } = this.props;\n        let start = year - yearSelectOffset;\n        let end = start + yearSelectTotal;\n        if (validRange) {\n            start = validRange[0].get('year');\n            end = validRange[1].get('year') + 1;\n        }\n        const suffix = locale.year === '年' ? '年' : '';\n        const options = [];\n        for (let index = start; index < end; index++) {\n            options.push(<Option key={`${index}`}>{index + suffix}</Option>);\n        }\n        return (<Select size={fullscreen ? 'default' : 'small'} dropdownMatchSelectWidth={false} className={`${prefixCls}-year-select`} onChange={this.onYearChange} value={String(year)} getPopupContainer={() => this.calenderHeaderNode}>\n        {options}\n      </Select>);\n    }\n    getMonthsLocale(value) {\n        const current = value.clone();\n        const localeData = value.localeData();\n        const months = [];\n        for (let i = 0; i < 12; i++) {\n            current.month(i);\n            months.push(localeData.monthsShort(current));\n        }\n        return months;\n    }\n    getMonthSelectElement(prefixCls, month, months) {\n        const { fullscreen, validRange, value } = this.props;\n        const options = [];\n        let start = 0;\n        let end = 12;\n        if (validRange) {\n            const [rangeStart, rangeEnd] = validRange;\n            const currentYear = value.get('year');\n            if (rangeEnd.get('year') === currentYear) {\n                end = rangeEnd.get('month') + 1;\n            }\n            if (rangeStart.get('year') === currentYear) {\n                start = rangeStart.get('month');\n            }\n        }\n        for (let index = start; index < end; index++) {\n            options.push(<Option key={`${index}`}>{months[index]}</Option>);\n        }\n        return (<Select size={fullscreen ? 'default' : 'small'} dropdownMatchSelectWidth={false} className={`${prefixCls}-month-select`} value={String(month)} onChange={this.onMonthChange} getPopupContainer={() => this.calenderHeaderNode}>\n        {options}\n      </Select>);\n    }\n    render() {\n        return <ConfigConsumer>{this.renderHeader}</ConfigConsumer>;\n    }\n}\nHeader.defaultProps = {\n    yearSelectOffset: 10,\n    yearSelectTotal: 20,\n};\n"],"file":"Header.js"}