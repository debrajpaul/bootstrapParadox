{"version":3,"sources":["table/SelectionCheckboxAll.jsx"],"names":["SelectionCheckboxAll","props","handleSelectAllChange","e","checked","target","onSelect","defaultSelections","hideDefaultSelections","key","text","locale","selectAll","selectInvert","state","getCheckState","indeterminate","getIndeterminateState","subscribe","nextProps","setCheckState","unsubscribe","store","data","type","byDefaultChecked","getCheckboxPropsByItem","getRecordKey","item","i","defaultChecked","getState","selectedRowKeys","indexOf","setState","prevState","newState","length","selectionDirty","checkSelection","selections","map","selection","index","disabled","prefixCls","getPopupContainer","selectionPrefixCls","customSelections","newSelections","Array","isArray","concat","menu","renderMenus","React","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Checkbox from '../checkbox';\nimport Dropdown from '../dropdown';\nimport Menu from '../menu';\nimport Icon from '../icon';\nimport classNames from 'classnames';\nexport default class SelectionCheckboxAll extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSelectAllChange = (e) => {\n            const checked = e.target.checked;\n            this.props.onSelect(checked ? 'all' : 'removeAll', 0, null);\n        };\n        this.defaultSelections = props.hideDefaultSelections\n            ? []\n            : [\n                {\n                    key: 'all',\n                    text: props.locale.selectAll,\n                    onSelect: () => { },\n                },\n                {\n                    key: 'invert',\n                    text: props.locale.selectInvert,\n                    onSelect: () => { },\n                },\n            ];\n        this.state = {\n            checked: this.getCheckState(props),\n            indeterminate: this.getIndeterminateState(props),\n        };\n    }\n    componentDidMount() {\n        this.subscribe();\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setCheckState(nextProps);\n    }\n    componentWillUnmount() {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n    }\n    subscribe() {\n        const { store } = this.props;\n        this.unsubscribe = store.subscribe(() => {\n            this.setCheckState(this.props);\n        });\n    }\n    checkSelection(props, data, type, byDefaultChecked) {\n        const { store, getCheckboxPropsByItem, getRecordKey } = props || this.props;\n        // type should be 'every' | 'some'\n        if (type === 'every' || type === 'some') {\n            return byDefaultChecked\n                ? data[type]((item, i) => getCheckboxPropsByItem(item, i).defaultChecked)\n                : data[type]((item, i) => store.getState().selectedRowKeys.indexOf(getRecordKey(item, i)) >= 0);\n        }\n        return false;\n    }\n    setCheckState(props) {\n        const checked = this.getCheckState(props);\n        const indeterminate = this.getIndeterminateState(props);\n        this.setState(prevState => {\n            const newState = {};\n            if (indeterminate !== prevState.indeterminate) {\n                newState.indeterminate = indeterminate;\n            }\n            if (checked !== prevState.checked) {\n                newState.checked = checked;\n            }\n            return newState;\n        });\n    }\n    getCheckState(props) {\n        const { store, data } = props;\n        let checked;\n        if (!data.length) {\n            checked = false;\n        }\n        else {\n            checked = store.getState().selectionDirty\n                ? this.checkSelection(props, data, 'every', false)\n                : this.checkSelection(props, data, 'every', false) ||\n                    this.checkSelection(props, data, 'every', true);\n        }\n        return checked;\n    }\n    getIndeterminateState(props) {\n        const { store, data } = props;\n        let indeterminate;\n        if (!data.length) {\n            indeterminate = false;\n        }\n        else {\n            indeterminate = store.getState().selectionDirty\n                ? this.checkSelection(props, data, 'some', false) &&\n                    !this.checkSelection(props, data, 'every', false)\n                : (this.checkSelection(props, data, 'some', false) &&\n                    !this.checkSelection(props, data, 'every', false)) ||\n                    (this.checkSelection(props, data, 'some', true) &&\n                        !this.checkSelection(props, data, 'every', true));\n        }\n        return indeterminate;\n    }\n    renderMenus(selections) {\n        return selections.map((selection, index) => {\n            return (<Menu.Item key={selection.key || index}>\n          <div onClick={() => {\n                this.props.onSelect(selection.key, index, selection.onSelect);\n            }}>\n            {selection.text}\n          </div>\n        </Menu.Item>);\n        });\n    }\n    render() {\n        const { disabled, prefixCls, selections, getPopupContainer } = this.props;\n        const { checked, indeterminate } = this.state;\n        const selectionPrefixCls = `${prefixCls}-selection`;\n        let customSelections = null;\n        if (selections) {\n            const newSelections = Array.isArray(selections)\n                ? this.defaultSelections.concat(selections)\n                : this.defaultSelections;\n            const menu = (<Menu className={`${selectionPrefixCls}-menu`} selectedKeys={[]}>\n          {this.renderMenus(newSelections)}\n        </Menu>);\n            customSelections =\n                newSelections.length > 0 ? (<Dropdown overlay={menu} getPopupContainer={getPopupContainer}>\n            <div className={`${selectionPrefixCls}-down`}>\n              <Icon type=\"down\"/>\n            </div>\n          </Dropdown>) : null;\n        }\n        return (<div className={selectionPrefixCls}>\n        <Checkbox className={classNames({ [`${selectionPrefixCls}-select-all-custom`]: customSelections })} checked={checked} indeterminate={indeterminate} disabled={disabled} onChange={this.handleSelectAllChange}/>\n        {customSelections}\n      </div>);\n    }\n}\n"],"file":"SelectionCheckboxAll.js"}