{"version":3,"sources":["locale-provider/index.jsx"],"names":["setMomentLocale","locale","moment","LocaleProvider","props","Modal","antLocale","exist","prevProps","React","Children","only","children","Component","propTypes","PropTypes","object","defaultProps","childContextTypes"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,eAAT,CAAyBC,MAAzB,EAAiC;AAC7B,MAAIA,MAAM,IAAIA,MAAM,CAACA,MAArB,EAA6B;AACzB,oCAAeC,MAAf,EAAuBD,MAAvB,CAA8BA,MAAM,CAACA,MAArC;AACH,GAFD,MAGK;AACD,oCAAeC,MAAf,EAAuBD,MAAvB,CAA8B,IAA9B;AACH;AACJ;;IACoBE,c;;;;;AACjB,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,wFAAMA,KAAN;AACAJ,IAAAA,eAAe,CAACI,KAAK,CAACH,MAAP,CAAf;AACA,qCAAoBG,KAAK,CAACH,MAAN,IAAgBG,KAAK,CAACH,MAAN,CAAaI,KAAjD;AAHe;AAIlB;;;;sCACiB;AACd,aAAO;AACHC,QAAAA,SAAS,EAAE,SAAc,EAAd,EAAkB,KAAKF,KAAL,CAAWH,MAA7B,EAAqC;AAAEM,UAAAA,KAAK,EAAE;AAAT,SAArC;AADR,OAAP;AAGH;;;uCACkBC,S,EAAW;AAAA,UAClBP,MADkB,GACP,KAAKG,KADE,CAClBH,MADkB;;AAE1B,UAAIO,SAAS,CAACP,MAAV,KAAqBA,MAAzB,EAAiC;AAC7BD,QAAAA,eAAe,CAACC,MAAD,CAAf;AACH;;AACD,uCAAoBA,MAAM,IAAIA,MAAM,CAACI,KAArC;AACH;;;2CACsB;AACnB;AACH;;;6BACQ;AACL,aAAOI,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoB,KAAKP,KAAL,CAAWQ,QAA/B,CAAP;AACH;;;;EAvBuCH,KAAK,CAACI,S;;;AAyBlDV,cAAc,CAACW,SAAf,GAA2B;AACvBb,EAAAA,MAAM,EAAEc,SAAS,CAACC;AADK,CAA3B;AAGAb,cAAc,CAACc,YAAf,GAA8B;AAC1BhB,EAAAA,MAAM,EAAE;AADkB,CAA9B;AAGAE,cAAc,CAACe,iBAAf,GAAmC;AAC/BZ,EAAAA,SAAS,EAAES,SAAS,CAACC;AADU,CAAnC","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as moment from 'moment';\nimport interopDefault from '../_util/interopDefault';\nimport { changeConfirmLocale } from '../modal/locale';\nfunction setMomentLocale(locale) {\n    if (locale && locale.locale) {\n        interopDefault(moment).locale(locale.locale);\n    }\n    else {\n        interopDefault(moment).locale('en');\n    }\n}\nexport default class LocaleProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        setMomentLocale(props.locale);\n        changeConfirmLocale(props.locale && props.locale.Modal);\n    }\n    getChildContext() {\n        return {\n            antLocale: Object.assign({}, this.props.locale, { exist: true }),\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { locale } = this.props;\n        if (prevProps.locale !== locale) {\n            setMomentLocale(locale);\n        }\n        changeConfirmLocale(locale && locale.Modal);\n    }\n    componentWillUnmount() {\n        changeConfirmLocale();\n    }\n    render() {\n        return React.Children.only(this.props.children);\n    }\n}\nLocaleProvider.propTypes = {\n    locale: PropTypes.object,\n};\nLocaleProvider.defaultProps = {\n    locale: {},\n};\nLocaleProvider.childContextTypes = {\n    antLocale: PropTypes.object,\n};\n"],"file":"index.js"}